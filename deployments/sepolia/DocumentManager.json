{
  "address": "0x086D049ad9FC4A4Dd758283F38f3F0Dc13c18A2A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract UserManager",
          "name": "_userManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "documentExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getDocument",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "documentId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "documentName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            }
          ],
          "internalType": "struct DocumentManager.Document",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "documentId",
          "type": "uint256"
        }
      ],
      "name": "getDocumentOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserDocuments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "documentId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "documentName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            }
          ],
          "internalType": "struct DocumentManager.Document[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "documentName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "uploadDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e2364b6ebe71ac63d740bdea979f12fe9a614faf7f3869a45773f1cef354257",
  "receipt": {
    "to": null,
    "from": "0xEC1C545CbE03A8aB14D73D312777204393bfC3F8",
    "contractAddress": "0x086D049ad9FC4A4Dd758283F38f3F0Dc13c18A2A",
    "transactionIndex": 39,
    "gasUsed": "1501137",
    "logsBloom": "0x
    "blockHash": "0x29e2b26f9fee9bd6c06f40d8cb3983e9b624a0b7965eaa74aa890b6d852fdf54",
    "transactionHash": "0x3e2364b6ebe71ac63d740bdea979f12fe9a614faf7f3869a45773f1cef354257",
    "logs": [],
    "blockNumber": 3704579,
    "cumulativeGasUsed": "9560020",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0bC495E27b0CE2F1CA24E9D4D05865A4bDfCF07b"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c75efd136895d140a2c77538722b650",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract UserManager\",\"name\":\"_userManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"documentExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getDocument\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documentName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct DocumentManager.Document\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"getDocumentOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"documentName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct DocumentManager.Document[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"documentName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"uploadDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"documentExists(uint256)\":{\"details\":\"Checks if a document exists.\",\"params\":{\"documentId\":\"The ID of the document.\"},\"returns\":{\"_0\":\"A boolean indicating whether the document exists or not.\"}},\"getDocument(uint256)\":{\"details\":\"Retrieves a document by its ID.\",\"params\":{\"documentId\":\"The ID of the document.\"},\"returns\":{\"_0\":\"The Document struct representing the document.\"}},\"getDocumentOwner(uint256)\":{\"details\":\"Retrieves the owner address of a document.\",\"params\":{\"documentId\":\"The ID of the document.\"},\"returns\":{\"_0\":\"The address of the document owner.\"}},\"getUserDocuments(address)\":{\"details\":\"Retrieves all documents for a user.\",\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"_0\":\"An array of Document structs representing the user's documents.\"}},\"uploadDocument(string,string,address)\":{\"details\":\"Uploads a new document for a user.\",\"params\":{\"documentName\":\"The name of the document.\",\"ipfsHash\":\"The IPFS hash of the document.\",\"userAddress\":\"The address of the user.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DocumentManager.sol\":\"DocumentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DocumentManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n//imports\\nimport \\\"./UserManager.sol\\\";\\n\\ncontract DocumentManager {\\n    //modifiers\\n    modifier onlyRegisteredUser() {\\n        require(\\n            userManager.getUser(msg.sender).accountAddress == msg.sender,\\n            \\\"User is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    //structure to represent a Document\\n    struct Document {\\n        uint256 documentId;\\n        string documentName;\\n        address ownerAddress;\\n        string ipfsHash;\\n    }\\n\\n    //mapping to store documents by user\\n    mapping(address => Document[]) private userToDocuments;\\n\\n    UserManager private userManager;\\n    uint256 private documentIdCounter; //unique to each document\\n    Document[] private documents;\\n\\n    //constructor\\n    constructor(UserManager _userManager) {\\n        userManager = _userManager;\\n        documentIdCounter = 0;\\n    }\\n\\n    /**\\n     * @dev Uploads a new document for a user.\\n     * @param documentName The name of the document.\\n     * @param ipfsHash The IPFS hash of the document.\\n     * @param userAddress The address of the user.\\n     */\\n    function uploadDocument(\\n        string memory documentName,\\n        string memory ipfsHash,\\n        address userAddress\\n    ) external onlyRegisteredUser {\\n        require(bytes(ipfsHash).length > 0, \\\"IPFS Hash cannot be empty.\\\");\\n        Document memory newDocument = Document({\\n            documentId: documentIdCounter,\\n            documentName: documentName,\\n            ipfsHash: ipfsHash,\\n            ownerAddress: userAddress\\n        });\\n        //add the new document to the mapping\\n        userToDocuments[userAddress].push(newDocument);\\n        documents.push(newDocument);\\n        documentIdCounter++;\\n    }\\n\\n    /**\\n     * @dev Retrieves all documents for a user.\\n     * @param userAddress The address of the user.\\n     * @return An array of Document structs representing the user's documents.\\n     */\\n    function getUserDocuments(\\n        address userAddress\\n    ) external view onlyRegisteredUser returns (Document[] memory) {\\n        return userToDocuments[userAddress];\\n    }\\n\\n    /**\\n     * @dev Retrieves a document by its ID.\\n     * @param documentId The ID of the document.\\n     * @return The Document struct representing the document.\\n     */\\n    function getDocument(\\n        uint256 documentId\\n    ) public view onlyRegisteredUser returns (Document memory) {\\n        require(documentId < documents.length, \\\"Invalid document ID\\\");\\n        return documents[documentId];\\n    }\\n\\n    /**\\n     * @dev Checks if a document exists.\\n     * @param documentId The ID of the document.\\n     * @return A boolean indicating whether the document exists or not.\\n     */\\n    function documentExists(\\n        uint256 documentId\\n    ) public view onlyRegisteredUser returns (bool) {\\n        return documentId < documents.length;\\n    }\\n\\n    /**\\n     * @dev Retrieves the owner address of a document.\\n     * @param documentId The ID of the document.\\n     * @return The address of the document owner.\\n     */\\n    function getDocumentOwner(\\n        uint256 documentId\\n    ) public view onlyRegisteredUser returns (address) {\\n        require(documentExists(documentId), \\\"Document does not exist\\\");\\n        return documents[documentId].ownerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x6bd90603eda1fc3f2a1f2ee34e8df1cbba2ec431a142bbc8cb27e52ddd033f5a\",\"license\":\"MIT\"},\"contracts/UserManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n//errors\\nerror UserManager__InvalidDOB(bytes32 rollNumber, bytes32 DOB);\\nerror UserManager__InvalidPrivateKey(address accountAddress);\\nerror UserManager__InvalidPassword(string emailId, string password);\\nerror UserManager__RollNumberNotFound(bytes32 rollNumber);\\n\\n/**\\n * @title UserManager\\n * @notice A contract to register and login users\\n */\\ncontract UserManager {\\n    //events\\n    event UserRegistered(bytes32 indexed rollNumber, bytes32 DOB);\\n    event UserLoggedIn(address accountAddress);\\n    event AdminRegistered(string indexed emailId, address adminAddress);\\n    event AdminLoggedIn(address accountAddress);\\n\\n    //structs for User and Admin\\n    struct User {\\n        bytes32 rollNumber;\\n        bytes32 dateOfBirth;\\n        address accountAddress;\\n    }\\n    struct Admin {\\n        string emailId;\\n        address account;\\n    }\\n\\n    //variables\\n    string private constant PASSWORD = \\\"something_else\\\";\\n    mapping(bytes32 => bytes32) private rollNumberToDOB; //sign-up\\n    mapping(address => User) private users; //for login\\n    // Declare an array to store user addresses\\n    address[] private userAddresses; //for finding address from roll_number\\n    mapping(address => Admin) private admins; //login of Admins (O(logn) time complexity)\\n\\n    /**\\n     * @notice Registers a new user\\n     * @param DOB The date of birth of the user\\n     * @param rollNumber The roll number of the user\\n     */\\n    function registerUser(bytes32 DOB, bytes32 rollNumber) external {\\n        if (rollNumberToDOB[rollNumber] != DOB) {\\n            revert UserManager__InvalidDOB(rollNumber, DOB);\\n        }\\n        User memory newUser = User({\\n            rollNumber: rollNumber,\\n            dateOfBirth: DOB,\\n            accountAddress: msg.sender\\n        });\\n        users[msg.sender] = newUser;\\n        userAddresses.push(msg.sender);\\n        emit UserRegistered(rollNumber, DOB);\\n    }\\n\\n    /**\\n     * @notice Logs in a user by verifying their private key\\n     * @return result True if the login is successful, false otherwise\\n     */\\n    function loginUser() external returns (bool result) {\\n        if (users[msg.sender].rollNumber == \\\"\\\") {\\n            return false;\\n        }\\n        emit UserLoggedIn(msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gets the details of a particular user\\n     * @param userAddress The address of the user\\n     * @return user The user details\\n     */\\n    function getUser(address userAddress) external view returns (User memory) {\\n        if (users[userAddress].rollNumber == \\\"\\\") {\\n            revert UserManager__InvalidPrivateKey(userAddress);\\n        }\\n        return users[userAddress];\\n    }\\n\\n    //Admin Functionalities\\n    /**\\n     * @notice Registers a new admin\\n     * @param emailId The email ID of the admin\\n     * @param password The password of the admin\\n     */\\n    function registerAdmin(\\n        string memory emailId,\\n        string memory password\\n    ) public {\\n        if (keccak256(bytes(password)) != keccak256(bytes(PASSWORD))) {\\n            revert UserManager__InvalidPassword(emailId, password);\\n        }\\n        Admin memory newAdmin = Admin({emailId: emailId, account: msg.sender});\\n        admins[msg.sender] = newAdmin;\\n        emit AdminRegistered(emailId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Logs in an admin\\n     * @return result True if the login is successful, false otherwise\\n     */\\n    function loginAdmin() external returns (bool result) {\\n        if (admins[msg.sender].account == address(0)) {\\n            return false;\\n        }\\n        emit AdminLoggedIn(msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the date of birth for a given roll number\\n     * @param rollNumber The roll number of the user\\n     * @param dateOfBirth The date of birth of the user\\n     */\\n    function setRollNumberToDOB(\\n        bytes32 rollNumber,\\n        bytes32 dateOfBirth\\n    ) external {\\n        rollNumberToDOB[rollNumber] = dateOfBirth;\\n    }\\n\\n    /**\\n     * @notice Gets the date of birth for a given roll number\\n     * @param rollNumber The roll number of the user\\n     * @return dateOfBirth The date of birth of the user\\n     */\\n    function getRollNumberToDOB(\\n        bytes32 rollNumber\\n    ) external view returns (bytes32) {\\n        return rollNumberToDOB[rollNumber];\\n    }\\n\\n    /**\\n     * @notice Finds the account address by roll number\\n     * @param rollNumber The roll number of the user\\n     * @return accountAddress The account address of the user\\n     */\\n    function findAccountAddressByRollNumber(\\n        bytes32 rollNumber\\n    ) public view returns (address) {\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\n            address userAddress = userAddresses[i];\\n            if (users[userAddress].rollNumber == rollNumber) {\\n                return userAddress;\\n            }\\n        }\\n        revert UserManager__RollNumberNotFound(rollNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xf77663827d1062ef143bdae280adb2650016ebfd40ff19ae38d098a42d9d4e0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b0538038062001b05833981810160405281019062000037919062000105565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002819055505062000137565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b9826200008c565b9050919050565b6000620000cd82620000ac565b9050919050565b620000df81620000c0565b8114620000eb57600080fd5b50565b600081519050620000ff81620000d4565b92915050565b6000602082840312156200011e576200011d62000087565b5b60006200012e84828501620000ee565b91505092915050565b6119be80620001476000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806308734ab11461005c5780631fe5994b1461008c5780633f9b250a146100a857806390a4b162146100d8578063ac6a746f14610108575b600080fd5b61007660048036038101906100719190610e02565b610138565b6040516100839190610e70565b60405180910390f35b6100a660048036038101906100a19190610ffd565b6102dc565b005b6100c260048036038101906100bd9190610e02565b61061a565b6040516100cf919061118f565b60405180910390f35b6100f260048036038101906100ed91906111b1565b61092e565b6040516100ff919061130a565b60405180910390f35b610122600480360381019061011d9190610e02565b610c5c565b60405161012f9190611347565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016101ac9190610e70565b606060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e906114a0565b60405180910390fd5b61025082610c5c565b61028f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102869061150c565b60405180910390fd5b600382815481106102a3576102a261152c565b5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b815260040161034e9190610e70565b606060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff16146103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e0906114a0565b60405180910390fd5b600082511161042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906115a7565b60405180910390fd5b6000604051806080016040528060025481526020018581526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018481525090506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010190816104f191906117d3565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908161054e91906117d3565b505050600381908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101908161059c91906117d3565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816105f991906117d3565b5050506002600081548092919061060f906118d4565b919050555050505050565b610622610d7a565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016106949190610e70565b606060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff161461072f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610726906114a0565b60405180910390fd5b6003805490508210610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90611968565b60405180910390fd5b6003828154811061078a5761078961152c565b5b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546107bd906115f6565b80601f01602080910402602001604051908101604052809291908181526020018280546107e9906115f6565b80156108365780601f1061080b57610100808354040283529160200191610836565b820191906000526020600020905b81548152906001019060200180831161081957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546108a5906115f6565b80601f01602080910402602001604051908101604052809291908181526020018280546108d1906115f6565b801561091e5780601f106108f35761010080835404028352916020019161091e565b820191906000526020600020905b81548152906001019060200180831161090157829003601f168201915b5050505050815250509050919050565b60603373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016109a29190610e70565b606060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a34906114a0565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610c51578382906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ad8906115f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b04906115f6565b8015610b515780601f10610b2657610100808354040283529160200191610b51565b820191906000526020600020905b815481529060010190602001808311610b3457829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610bc0906115f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906115f6565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b50505050508152505081526020019060010190610a9b565b505050509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b8152600401610cd09190610e70565b606060405180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d62906114a0565b60405180910390fd5b60038054905082109050919050565b60405180608001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ddf81610dcc565b8114610dea57600080fd5b50565b600081359050610dfc81610dd6565b92915050565b600060208284031215610e1857610e17610dc2565b5b6000610e2684828501610ded565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5a82610e2f565b9050919050565b610e6a81610e4f565b82525050565b6000602082019050610e856000830184610e61565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ede82610e95565b810181811067ffffffffffffffff82111715610efd57610efc610ea6565b5b80604052505050565b6000610f10610db8565b9050610f1c8282610ed5565b919050565b600067ffffffffffffffff821115610f3c57610f3b610ea6565b5b610f4582610e95565b9050602081019050919050565b82818337600083830152505050565b6000610f74610f6f84610f21565b610f06565b905082815260208101848484011115610f9057610f8f610e90565b5b610f9b848285610f52565b509392505050565b600082601f830112610fb857610fb7610e8b565b5b8135610fc8848260208601610f61565b91505092915050565b610fda81610e4f565b8114610fe557600080fd5b50565b600081359050610ff781610fd1565b92915050565b60008060006060848603121561101657611015610dc2565b5b600084013567ffffffffffffffff81111561103457611033610dc7565b5b61104086828701610fa3565b935050602084013567ffffffffffffffff81111561106157611060610dc7565b5b61106d86828701610fa3565b925050604061107e86828701610fe8565b9150509250925092565b61109181610dcc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d15780820151818401526020810190506110b6565b60008484015250505050565b60006110e882611097565b6110f281856110a2565b93506111028185602086016110b3565b61110b81610e95565b840191505092915050565b61111f81610e4f565b82525050565b600060808301600083015161113d6000860182611088565b506020830151848203602086015261115582826110dd565b915050604083015161116a6040860182611116565b506060830151848203606086015261118282826110dd565b9150508091505092915050565b600060208201905081810360008301526111a98184611125565b905092915050565b6000602082840312156111c7576111c6610dc2565b5b60006111d584828501610fe8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301516112226000860182611088565b506020830151848203602086015261123a82826110dd565b915050604083015161124f6040860182611116565b506060830151848203606086015261126782826110dd565b9150508091505092915050565b6000611280838361120a565b905092915050565b6000602082019050919050565b60006112a0826111de565b6112aa81856111e9565b9350836020820285016112bc856111fa565b8060005b858110156112f857848403895281516112d98582611274565b94506112e483611288565b925060208a019950506001810190506112c0565b50829750879550505050505092915050565b600060208201905081810360008301526113248184611295565b905092915050565b60008115159050919050565b6113418161132c565b82525050565b600060208201905061135c6000830184611338565b92915050565b600080fd5b6000819050919050565b61137a81611367565b811461138557600080fd5b50565b60008151905061139781611371565b92915050565b6000815190506113ac81610fd1565b92915050565b6000606082840312156113c8576113c7611362565b5b6113d26060610f06565b905060006113e284828501611388565b60008301525060206113f684828501611388565b602083015250604061140a8482850161139d565b60408301525092915050565b60006060828403121561142c5761142b610dc2565b5b600061143a848285016113b2565b91505092915050565b600082825260208201905092915050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b600061148a601683611443565b915061149582611454565b602082019050919050565b600060208201905081810360008301526114b98161147d565b9050919050565b7f446f63756d656e7420646f6573206e6f74206578697374000000000000000000600082015250565b60006114f6601783611443565b9150611501826114c0565b602082019050919050565b60006020820190508181036000830152611525816114e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4950465320486173682063616e6e6f7420626520656d7074792e000000000000600082015250565b6000611591601a83611443565b915061159c8261155b565b602082019050919050565b600060208201905081810360008301526115c081611584565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061160e57607f821691505b602082108103611621576116206115c7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261164c565b611693868361164c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116d06116cb6116c684610dcc565b6116ab565b610dcc565b9050919050565b6000819050919050565b6116ea836116b5565b6116fe6116f6826116d7565b848454611659565b825550505050565b600090565b611713611706565b61171e8184846116e1565b505050565b5b818110156117425761173760008261170b565b600181019050611724565b5050565b601f8211156117875761175881611627565b6117618461163c565b81016020851015611770578190505b61178461177c8561163c565b830182611723565b50505b505050565b600082821c905092915050565b60006117aa6000198460080261178c565b1980831691505092915050565b60006117c38383611799565b9150826002028217905092915050565b6117dc82611097565b67ffffffffffffffff8111156117f5576117f4610ea6565b5b6117ff82546115f6565b61180a828285611746565b600060209050601f83116001811461183d576000841561182b578287015190505b61183585826117b7565b86555061189d565b601f19841661184b86611627565b60005b828110156118735784890151825560018201915060208501945060208101905061184e565b86831015611890578489015161188c601f891682611799565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118df82610dcc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611911576119106118a5565b5b600182019050919050565b7f496e76616c696420646f63756d656e7420494400000000000000000000000000600082015250565b6000611952601383611443565b915061195d8261191c565b602082019050919050565b6000602082019050818103600083015261198181611945565b905091905056fea26469706673582212201f0689a403ef9bc4984f21f033f7fd6066659d14661b1db1dd51e53d0ce1dfed64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806308734ab11461005c5780631fe5994b1461008c5780633f9b250a146100a857806390a4b162146100d8578063ac6a746f14610108575b600080fd5b61007660048036038101906100719190610e02565b610138565b6040516100839190610e70565b60405180910390f35b6100a660048036038101906100a19190610ffd565b6102dc565b005b6100c260048036038101906100bd9190610e02565b61061a565b6040516100cf919061118f565b60405180910390f35b6100f260048036038101906100ed91906111b1565b61092e565b6040516100ff919061130a565b60405180910390f35b610122600480360381019061011d9190610e02565b610c5c565b60405161012f9190611347565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016101ac9190610e70565b606060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e906114a0565b60405180910390fd5b61025082610c5c565b61028f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102869061150c565b60405180910390fd5b600382815481106102a3576102a261152c565b5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b815260040161034e9190610e70565b606060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff16146103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e0906114a0565b60405180910390fd5b600082511161042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906115a7565b60405180910390fd5b6000604051806080016040528060025481526020018581526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018481525090506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010190816104f191906117d3565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908161054e91906117d3565b505050600381908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101908161059c91906117d3565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816105f991906117d3565b5050506002600081548092919061060f906118d4565b919050555050505050565b610622610d7a565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016106949190610e70565b606060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff161461072f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610726906114a0565b60405180910390fd5b6003805490508210610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90611968565b60405180910390fd5b6003828154811061078a5761078961152c565b5b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546107bd906115f6565b80601f01602080910402602001604051908101604052809291908181526020018280546107e9906115f6565b80156108365780601f1061080b57610100808354040283529160200191610836565b820191906000526020600020905b81548152906001019060200180831161081957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546108a5906115f6565b80601f01602080910402602001604051908101604052809291908181526020018280546108d1906115f6565b801561091e5780601f106108f35761010080835404028352916020019161091e565b820191906000526020600020905b81548152906001019060200180831161090157829003601f168201915b5050505050815250509050919050565b60603373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b81526004016109a29190610e70565b606060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a34906114a0565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610c51578382906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ad8906115f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b04906115f6565b8015610b515780601f10610b2657610100808354040283529160200191610b51565b820191906000526020600020905b815481529060010190602001808311610b3457829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610bc0906115f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906115f6565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b50505050508152505081526020019060010190610a9b565b505050509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f77926b336040518263ffffffff1660e01b8152600401610cd09190610e70565b606060405180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611416565b6040015173ffffffffffffffffffffffffffffffffffffffff1614610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d62906114a0565b60405180910390fd5b60038054905082109050919050565b60405180608001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ddf81610dcc565b8114610dea57600080fd5b50565b600081359050610dfc81610dd6565b92915050565b600060208284031215610e1857610e17610dc2565b5b6000610e2684828501610ded565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5a82610e2f565b9050919050565b610e6a81610e4f565b82525050565b6000602082019050610e856000830184610e61565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ede82610e95565b810181811067ffffffffffffffff82111715610efd57610efc610ea6565b5b80604052505050565b6000610f10610db8565b9050610f1c8282610ed5565b919050565b600067ffffffffffffffff821115610f3c57610f3b610ea6565b5b610f4582610e95565b9050602081019050919050565b82818337600083830152505050565b6000610f74610f6f84610f21565b610f06565b905082815260208101848484011115610f9057610f8f610e90565b5b610f9b848285610f52565b509392505050565b600082601f830112610fb857610fb7610e8b565b5b8135610fc8848260208601610f61565b91505092915050565b610fda81610e4f565b8114610fe557600080fd5b50565b600081359050610ff781610fd1565b92915050565b60008060006060848603121561101657611015610dc2565b5b600084013567ffffffffffffffff81111561103457611033610dc7565b5b61104086828701610fa3565b935050602084013567ffffffffffffffff81111561106157611060610dc7565b5b61106d86828701610fa3565b925050604061107e86828701610fe8565b9150509250925092565b61109181610dcc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d15780820151818401526020810190506110b6565b60008484015250505050565b60006110e882611097565b6110f281856110a2565b93506111028185602086016110b3565b61110b81610e95565b840191505092915050565b61111f81610e4f565b82525050565b600060808301600083015161113d6000860182611088565b506020830151848203602086015261115582826110dd565b915050604083015161116a6040860182611116565b506060830151848203606086015261118282826110dd565b9150508091505092915050565b600060208201905081810360008301526111a98184611125565b905092915050565b6000602082840312156111c7576111c6610dc2565b5b60006111d584828501610fe8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301516112226000860182611088565b506020830151848203602086015261123a82826110dd565b915050604083015161124f6040860182611116565b506060830151848203606086015261126782826110dd565b9150508091505092915050565b6000611280838361120a565b905092915050565b6000602082019050919050565b60006112a0826111de565b6112aa81856111e9565b9350836020820285016112bc856111fa565b8060005b858110156112f857848403895281516112d98582611274565b94506112e483611288565b925060208a019950506001810190506112c0565b50829750879550505050505092915050565b600060208201905081810360008301526113248184611295565b905092915050565b60008115159050919050565b6113418161132c565b82525050565b600060208201905061135c6000830184611338565b92915050565b600080fd5b6000819050919050565b61137a81611367565b811461138557600080fd5b50565b60008151905061139781611371565b92915050565b6000815190506113ac81610fd1565b92915050565b6000606082840312156113c8576113c7611362565b5b6113d26060610f06565b905060006113e284828501611388565b60008301525060206113f684828501611388565b602083015250604061140a8482850161139d565b60408301525092915050565b60006060828403121561142c5761142b610dc2565b5b600061143a848285016113b2565b91505092915050565b600082825260208201905092915050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b600061148a601683611443565b915061149582611454565b602082019050919050565b600060208201905081810360008301526114b98161147d565b9050919050565b7f446f63756d656e7420646f6573206e6f74206578697374000000000000000000600082015250565b60006114f6601783611443565b9150611501826114c0565b602082019050919050565b60006020820190508181036000830152611525816114e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4950465320486173682063616e6e6f7420626520656d7074792e000000000000600082015250565b6000611591601a83611443565b915061159c8261155b565b602082019050919050565b600060208201905081810360008301526115c081611584565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061160e57607f821691505b602082108103611621576116206115c7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261164c565b611693868361164c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116d06116cb6116c684610dcc565b6116ab565b610dcc565b9050919050565b6000819050919050565b6116ea836116b5565b6116fe6116f6826116d7565b848454611659565b825550505050565b600090565b611713611706565b61171e8184846116e1565b505050565b5b818110156117425761173760008261170b565b600181019050611724565b5050565b601f8211156117875761175881611627565b6117618461163c565b81016020851015611770578190505b61178461177c8561163c565b830182611723565b50505b505050565b600082821c905092915050565b60006117aa6000198460080261178c565b1980831691505092915050565b60006117c38383611799565b9150826002028217905092915050565b6117dc82611097565b67ffffffffffffffff8111156117f5576117f4610ea6565b5b6117ff82546115f6565b61180a828285611746565b600060209050601f83116001811461183d576000841561182b578287015190505b61183585826117b7565b86555061189d565b601f19841661184b86611627565b60005b828110156118735784890151825560018201915060208501945060208101905061184e565b86831015611890578489015161188c601f891682611799565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118df82610dcc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611911576119106118a5565b5b600182019050919050565b7f496e76616c696420646f63756d656e7420494400000000000000000000000000600082015250565b6000611952601383611443565b915061195d8261191c565b602082019050919050565b6000602082019050818103600083015261198181611945565b905091905056fea26469706673582212201f0689a403ef9bc4984f21f033f7fd6066659d14661b1db1dd51e53d0ce1dfed64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "documentExists(uint256)": {
        "details": "Checks if a document exists.",
        "params": {
          "documentId": "The ID of the document."
        },
        "returns": {
          "_0": "A boolean indicating whether the document exists or not."
        }
      },
      "getDocument(uint256)": {
        "details": "Retrieves a document by its ID.",
        "params": {
          "documentId": "The ID of the document."
        },
        "returns": {
          "_0": "The Document struct representing the document."
        }
      },
      "getDocumentOwner(uint256)": {
        "details": "Retrieves the owner address of a document.",
        "params": {
          "documentId": "The ID of the document."
        },
        "returns": {
          "_0": "The address of the document owner."
        }
      },
      "getUserDocuments(address)": {
        "details": "Retrieves all documents for a user.",
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "_0": "An array of Document structs representing the user's documents."
        }
      },
      "uploadDocument(string,string,address)": {
        "details": "Uploads a new document for a user.",
        "params": {
          "documentName": "The name of the document.",
          "ipfsHash": "The IPFS hash of the document.",
          "userAddress": "The address of the user."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34,
        "contract": "contracts/DocumentManager.sol:DocumentManager",
        "label": "userToDocuments",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Document)28_storage)dyn_storage)"
      },
      {
        "astId": 37,
        "contract": "contracts/DocumentManager.sol:DocumentManager",
        "label": "userManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(UserManager)515"
      },
      {
        "astId": 39,
        "contract": "contracts/DocumentManager.sol:DocumentManager",
        "label": "documentIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 43,
        "contract": "contracts/DocumentManager.sol:DocumentManager",
        "label": "documents",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Document)28_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Document)28_storage)dyn_storage": {
        "base": "t_struct(Document)28_storage",
        "encoding": "dynamic_array",
        "label": "struct DocumentManager.Document[]",
        "numberOfBytes": "32"
      },
      "t_contract(UserManager)515": {
        "encoding": "inplace",
        "label": "contract UserManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Document)28_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DocumentManager.Document[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Document)28_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Document)28_storage": {
        "encoding": "inplace",
        "label": "struct DocumentManager.Document",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/DocumentManager.sol:DocumentManager",
            "label": "documentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/DocumentManager.sol:DocumentManager",
            "label": "documentName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/DocumentManager.sol:DocumentManager",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 27,
            "contract": "contracts/DocumentManager.sol:DocumentManager",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}